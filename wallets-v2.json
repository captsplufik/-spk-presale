
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SPK Token Presale</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Three.js CDN -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Inter Font -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <!-- TON Connect UI SDK -->
    <script src="https://unpkg.com/@tonconnect/sdk@latest/dist/tonconnect-sdk.min.js"></script>
    <script src="https://unpkg.com/@tonconnect/ui@latest/dist/tonconnect-ui.min.js"></script>
    <!-- Firebase SDKs -->
    <script type="module">
        // Import the functions you need from the SDKs you need
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.9.0/firebase-app.js";
        import { getAnalytics, logEvent } from "https://www.gstatic.com/firebasejs/11.9.0/firebase-analytics.js";
        import { getAuth, signInAnonymously, signInWithPopup, GoogleAuthProvider, signOut, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.9.0/firebase-auth.js";
        import { getFirestore, doc, getDoc, setDoc, updateDoc, onSnapshot, increment } from "https://www.gstatic.com/firebasejs/11.9.0/firebase-firestore.js";

        // Your web app's Firebase configuration
        const firebaseConfig = {
            apiKey: "AIzaSyBQLJ8yVgrnchDkfpj8NF_aPiSDPDo2a_Q",
            authDomain: "splufik-spk.firebaseapp.com",
            projectId: "splufik-spk",
            storageBucket: "splufik-spk.firebasestorage.app",
            messagingSenderId: "67191790905",
            appId: "1:67191790905:web:56ed3a7946e392cbe45ce8",
            measurementId: "G-QGWXYKS7DS"
        };

        // Initialize Firebase app directly
        const firebaseApp = initializeApp(firebaseConfig);
        const analyticsInstance = getAnalytics(firebaseApp); // Renamed to avoid conflict with global var
        const dbInstance = getFirestore(firebaseApp); // Renamed
        const authInstance = getAuth(firebaseApp); // Renamed

        // Expose Firebase objects and functions globally for the main script block
        window.firebase = {
            initializeApp,
            getAnalytics,
            logEvent,
            getAuth,
            signInAnonymously,
            signInWithPopup,
            GoogleAuthProvider,
            signOut,
            onAuthStateChanged,
            getFirestore,
            doc,
            getDoc,
            setDoc,
            updateDoc,
            onSnapshot,
            increment,
            db: dbInstance, // Expose db instance
            auth: authInstance, // Expose auth instance
            analytics: analyticsInstance // Expose analytics instance
        };
    </script>

    <style>
        /* Custom styles for Inter font and body background */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #0d1117; /* Dark background */
            overflow-x: hidden; /* Prevent horizontal scroll */
            color: #e2e8f0; /* Light text for dark background */
        }

        /* Canvas styling for 3D background */
        #three-bg {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1; /* Send to background */
            opacity: 0.15; /* Subtle opacity */
        }

        /* Custom animation for glow effect */
        @keyframes pulse-glow {
            0%, 100% {
                filter: brightness(1) drop-shadow(0 0 5px rgba(147, 51, 234, 0.5));
            }
            50% {
                filter: brightness(1.2) drop-shadow(0 0 15px rgba(147, 51, 234, 0.8));
            }
        }
        .animate-pulse-glow {
            animation: pulse-glow 4s infinite ease-in-out;
        }

        /* Custom message box styles */
        .message-box {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            padding: 12px 24px;
            border-radius: 8px;
            font-weight: 600;
            z-index: 1000;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        .message-box.hidden {
            opacity: 0;
            transform: translateX(-50%) translateY(-20px);
            pointer-events: none;
        }
        .message-box.success {
            background-color: #10b981; /* Emerald 500 */
            color: white;
        }
        .message-box.error {
            background-color: #ef4444; /* Red 500 */
            color: white;
        }
        .message-box.warning {
            background-color: #F59E0B; /* Amber 500 */
            color: white;
        }

        /* General fade-in animation */
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        .animate-fade-in {
            animation: fadeIn 0.8s ease-out forwards;
        }
        .delay-200 { animation-delay: 0.2s; }
        .delay-400 { animation-delay: 0.4s; }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        .animate-fade-in-up {
            animation: fadeInUp 0.8s ease-out forwards;
        }

        /* Responsive adjustments for the TON Connect button */
        #ton-connect-button-wrapper {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
            gap: 5px;
        }
        @media (max-width: 768px) {
            .header-container {
                flex-direction: column;
                gap: 15px;
            }
            #ton-connect-button-wrapper {
                align-items: center;
                width: 100%;
            }
        }

        /* Presale specific styles */
        .presale-countdown-item {
            text-align: center;
        }

        .presale-countdown-item span {
            font-size: 42px;
            font-weight: 700;
            color: #9333ea; /* Primary purple */
        }

        .presale-countdown-item small {
            display: block;
            font-size: 14px;
            color: #94a3b8; /* Gray */
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-top: 5px;
        }

        .progress-bar-container {
            margin-bottom: 30px;
        }

        .progress-label {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            font-weight: 500;
            color: #e2e8f0;
        }

        .progress-bar {
            height: 10px;
            background: #4a5568; /* Darker gray for empty bar */
            border-radius: 10px;
            overflow: hidden;
        }

        .progress {
            height: 100%;
            width: 0;
            background: linear-gradient(90deg, #9333ea, #ec4899); /* Purple to Pink gradient */
            border-radius: 10px;
            transition: width 1s ease;
        }

        .input-group {
            position: relative;
        }

        .input-group label {
            position: absolute;
            left: 15px;
            top: -10px;
            background: #1f2937; /* Dark gray for label background */
            padding: 0 10px;
            font-size: 14px;
            color: #9333ea; /* Primary purple */
            font-weight: 500;
            z-index: 1;
        }

        .input-group input, .input-group select {
            width: 100%;
            padding: 15px;
            border: 1px solid #4a5568; /* Darker gray border */
            border-radius: 8px;
            font-size: 16px;
            transition: all 0.3s;
            background-color: #2d3748; /* Even darker gray for input background */
            color: #e2e8f0;
        }

        .input-group input:focus, .input-group select:focus {
            outline: none;
            border-color: #9333ea; /* Primary purple on focus */
            box-shadow: 0 0 0 3px rgba(147, 51, 234, 0.2);
        }

        .token-price-display {
            text-align: center;
            font-size: 20px;
            margin: 20px 0;
            font-weight: 600;
            color: #e2e8f0;
        }

        .token-price-display span {
            color: #9333ea; /* Primary purple */
            font-size: 24px;
        }
        .transaction-status {
            padding: 12px;
            border-radius: 8px;
            margin: 15px 0;
            font-weight: 500;
            text-align: center;
            animation: fadeIn 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }
        .status-warning {
            background-color: #fbbf24; /* Amber 400 */
            color: #78350f; /* Amber 900 */
        }
        .status-success {
            background-color: #34d399; /* Green 400 */
            color: #065f46; /* Green 900 */
        }
        .status-error {
            background-color: #ef4444; /* Red 500 */
            color: #7f1d1d; /* Red 900 */
        }

        /* Admin Panel Specific Styles */
        .admin-section {
            display: none; /* Hidden by default */
            margin-top: 50px;
            padding: 40px;
            background-color: #1a202c; /* Darker gray */
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
            border: 1px solid #2d3748;
        }
        .admin-section.active {
            display: block; /* Show when active */
        }
        .admin-data-card {
            background-color: #2d3748;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            border: 1px solid #4a5568;
            text-align: left;
        }

        /* Multi-Crypto Payment Specific Styles */
        .payment-address-box {
            background-color: #1f2937;
            padding: 1rem;
            border-radius: 0.75rem;
            border: 1px solid #374151;
            margin-top: 1rem;
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }
        .payment-address-box .flex {
            align-items: center;
            gap: 0.5rem;
        }
        .payment-address-box strong {
            color: #9333ea;
        }
        .payment-address-box input {
            flex-grow: 1;
            background-color: #2d3748;
            border: 1px solid #4a5568;
            border-radius: 0.5rem;
            padding: 0.5rem;
            color: #e2e8f0;
            font-size: 0.875rem;
        }
        .payment-address-box button {
            background-color: #4F46E5;
            color: white;
            padding: 0.5rem 0.75rem;
            border-radius: 0.5rem;
            font-weight: 600;
            transition: background-color 0.2s;
        }
        .payment-address-box button:hover {
            background-color: #4338CA;
        }
        .qr-code-container {
            text-align: center;
            margin-top: 1rem;
        }
        .qr-code-container img {
            border-radius: 0.5rem;
            border: 4px solid #9333ea;
            display: inline-block; /* Ensure it respects text-align center */
            width: 150px; /* Fixed size for QR */
            height: 150px;
        }
    </style>
</head>
<body class="text-white flex flex-col min-h-screen">

    <!-- 3D Background Canvas -->
    <canvas id="three-bg"></canvas>

    <!-- Message Box Element -->
    <div id="messageBox" class="message-box hidden"></div>

    <!-- Navigation Bar -->
    <nav class="p-6 flex justify-between items-center z-10 bg-gray-900 bg-opacity-70 backdrop-blur-sm shadow-lg rounded-b-xl">
        <div class="flex items-center space-x-4">
            <a href="#" class="text-3xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-pink-600 rounded-lg p-1">
                SPK
            </a>
            <ul class="hidden md:flex space-x-8 text-lg">
                <li><a href="#presale-section" class="hover:text-purple-400 transition-colors duration-300">Presale</a></li>
                <li><a href="#tokenomics" class="hover:text-purple-400 transition-colors duration-300">Tokenomics</a></li>
                <li><a href="#roadmap" class="hover:text-purple-400 transition-colors duration-300">Roadmap</a></li>
                <li><a href="https://docs.yourproject.com" target="_blank" rel="noopener noreferrer" class="hover:text-purple-400 transition-colors duration-300">Docs</a></li>
            </ul>
        </div>
        <div id="ton-connect-button-wrapper">
            <!-- TON Connect UI Button will be rendered here -->
            <div id="ton-connect"></div>
            <div id="wallet-status" class="text-gray-400 text-sm">Not Connected</div>
            <div id="user-id-display" class="text-gray-400 text-xs mt-1">User ID: N/A</div>
        </div>
    </nav>

    <!-- Main Content Area (Now starts with Presale Section) -->
    <main class="flex-grow flex flex-col items-center justify-center py-16 px-4 md:px-8 z-10 space-y-16">
        <section id="presale-section" class="max-w-3xl mx-auto bg-gray-800 bg-opacity-80 backdrop-blur-md p-8 md:p-12 rounded-3xl shadow-2xl border border-gray-700 text-center animate-fade-in-up">
            <h2 class="text-4xl md:text-5xl font-bold mb-12 text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-pink-600">
                SPK Token Presale
            </h2>

            <!-- Presale Countdown -->
            <div class="mb-10 p-6 bg-gray-700 rounded-xl shadow-inner border border-gray-600">
                <h3 id="presale-countdown-title" class="text-2xl font-bold text-purple-300 mb-4">Presale Starts In:</h3>
                <div id="presale-countdown" class="text-4xl md:text-5xl font-mono font-extrabold text-green-400">
                    <span id="presale-days">00</span>d <span id="presale-hours">00</span>h <span id="presale-minutes">00</span>m <span id="presale-seconds">00</span>s
                </div>
            </div>

            <!-- Progress Bar -->
            <div class="progress-bar-container">
                <div class="progress-label">
                    <span>Raised: <strong id="raisedAmount">$20,000</strong></span>
                    <span>Target: <strong id="targetAmount">$5,000,000</strong></span>
                </div>
                <div class="progress-bar">
                    <div class="progress" id="presaleProgress" style="width: 25%;"></div>
                </div>
            </div>

            <!-- Purchase Form -->
            <div class="presale-form mt-8">
                <div class="input-group mb-6">
                    <label for="paymentMethod" class="block text-left mb-2">Choose Payment Method:</label>
                    <select id="paymentMethod" class="w-full">
                        <option value="ton">TON (The Open Network)</option>
                        <option value="btc">Bitcoin (BTC)</option>
                        <option value="eth">Ethereum (ETH / ERC20)</option>
                        <option value="bnb">Binance Coin (BNB / BEP20)</option>
                        <option value="usdt_erc20">USDT (ERC20)</option>
                        <option value="usdt_trc20">USDT (TRC20)</option>
                        <option value="usdt_bep20">USDT (BEP20)</option>
                    </select>
                </div>

                <!-- TON Connect UI (Visible by default, hidden when other methods selected) -->
                <div id="ton-payment-area">
                    <p class="text-gray-400 text-sm mt-2">
                        Connect your TON wallet above to buy with TON.
                    </p>
                    <div class="input-group mt-6">
                        <label for="usdtAmount">USDT Amount</label>
                        <input type="number" id="usdtAmount" placeholder="10 to 1000 USDT" min="10" max="1000" class="w-full">
                    </div>
                </div>

                <!-- Other Crypto Payment Details (Hidden by default) -->
                <div id="other-crypto-payment-area" class="hidden">
                    <p class="text-gray-400 text-center mb-4">
                        Please send your desired amount of <strong id="selected-crypto-name">TON</strong> to the address below.
                        <span id="send-amount-display" class="font-bold text-purple-300 block mt-2"></span>
                    </p>
                    <div class="payment-address-box">
                        <div class="flex">
                            <strong>Address:</strong>
                            <input type="text" id="crypto-address-display" value="" readonly />
                            <button onclick="copyAddress('crypto-address-display')">Copy</button>
                        </div>
                        <div class="qr-code-container">
                            <img id="qr-code-img" src="" alt="QR Code" class="w-36 h-36 mx-auto" onerror="this.src='https://placehold.co/150x150/000000/FFFFFF?text=QR'" />
                        </div>
                    </div>
                    <p class="text-gray-400 text-center text-sm mt-4">
                        <strong id="tx-hash-instructions">IMPORTANT: After sending funds, paste your transaction hash below to confirm your purchase and receive SPK tokens.</strong>
                    </p>
                    <div class="input-group mt-6">
                        <label for="txHashInput">Transaction Hash</label>
                        <input type="text" id="txHashInput" placeholder="Enter your transaction hash (TXID)" class="w-full">
                    </div>
                     <div class="input-group mt-6">
                        <label for="usdtAmountOtherCrypto">USDT Equivalent Amount (Manual Entry)</label>
                        <input type="number" id="usdtAmountOtherCrypto" placeholder="Enter USDT value sent" min="10" max="1000" class="w-full">
                    </div>
                </div>
                
                <button id="contribute-btn" class="w-full bg-gradient-to-r from-pink-600 to-purple-600 hover:from-pink-700 hover:to-purple-700 text-white font-bold py-4 px-12 rounded-full text-xl shadow-xl transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-purple-500 focus:ring-opacity-75 mt-6" disabled>
                    <span id="contribute-btn-normal-state"><i class="fas fa-coins mr-2"></i> Buy SPK Tokens</span>
                    <span id="contribute-btn-processing-state" class="hidden">Processing... <i class="fas fa-spinner fa-spin ml-2"></i></span>
                </button>
                <div id="presale-transaction-status" class="mt-4"></div>
                <p class="token-price-display">1 USDT = <span id="spk-token-rate">200 SPK</span></p>
            </div>

            <!-- Presale Claim Button -->
            <button id="claim-presale-tokens-btn" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-8 rounded-full text-lg shadow-xl transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-blue-500 focus:ring-opacity-75 mt-4" disabled>
                Claim Presale Tokens
            </button>
            <div id="presale-claim-status" class="mt-4 text-green-400 font-semibold"></div>
        </section>
    </main>

    <!-- Admin Panel Section -->
    <section id="admin-panel" class="max-w-3xl mx-auto admin-section animate-fade-in-up hidden">
        <h2 class="text-4xl md:text-5xl font-bold mb-8 text-transparent bg-clip-text bg-gradient-to-r from-yellow-400 to-red-600 text-center">
            Admin Panel
        </h2>
        <div class="flex flex-col items-center justify-center space-y-4 mb-8">
            <p id="admin-status" class="text-gray-400">Status: Not Logged In</p>
            <p id="admin-user-id" class="text-gray-400 text-sm"></p>
            <button id="admin-login-btn" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-8 rounded-full text-lg transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-blue-500 focus:ring-opacity-75">
                Login as Admin (Google)
            </button>
            <button id="admin-logout-btn" class="bg-red-500 hover:bg-red-600 text-white font-bold py-3 px-8 rounded-full text-lg transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-red-500 focus:ring-opacity-75 hidden">
                Logout
            </button>
        </div>

        <div id="admin-data-view" class="hidden">
            <h3 class="text-2xl font-bold text-purple-300 mb-4 text-center">Presale Overview</h3>
            <div class="admin-data-card">
                <p class="text-lg mb-2"><span class="font-semibold">Current Raised:</span> <strong id="admin-raised-amount">$20,000</strong></p>
                <p class="text-lg"><span class="font-semibold">Target Amount:</span> <strong id="admin-target-amount">$5,000,000</strong></p>
            </div>

            <!-- Placeholder for Admin Controls -->
            <h3 class="text-2xl font-bold text-cyan-300 mb-4 text-center">Admin Controls (Coming Soon)</h3>
            <div class="admin-data-card text-center">
                <p class="text-gray-400 mb-4">Features to adjust presale metrics and manage user data will be available here.</p>
                <button class="bg-gray-600 text-gray-400 font-bold py-3 px-8 rounded-full text-lg cursor-not-allowed">
                    Adjust Data
                </button>
            </div>
        </div>
    </section>

    <!-- Tokenomics Section -->
    <section id="tokenomics" class="py-20 px-4 bg-gray-950">
        <div class="max-w-6xl mx-auto text-center">
            <h2 class="text-4xl md:text-5xl font-bold mb-12 text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-pink-600">Tokenomics</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                <div class="bg-gray-800 p-8 rounded-xl shadow-lg border border-gray-700 hover:border-purple-500 transition-all duration-300 transform hover:-translate-y-2">
                    <h3 class="text-2xl font-semibold mb-4 text-purple-300"><i class="fas fa-coins mr-2"></i> Presale</h3>
                    <p class="text-gray-400">25% (500M SPK)<br>6mo cliff, 12mo vesting</p>
                </div>
                <div class="bg-gray-800 p-8 rounded-xl shadow-lg border border-gray-700 hover:border-cyan-500 transition-all duration-300 transform hover:-translate-y-2">
                    <h3 class="text-2xl font-semibold mb-4 text-cyan-300"><i class="fas fa-lock mr-2"></i> Liquidity</h3>
                    <p class="text-gray-400">20% (400M SPK)<br>2 year lock</p>
                </div>
                <div class="bg-gray-800 p-8 rounded-xl shadow-lg border border-gray-700 hover:border-pink-500 transition-all duration-300 transform hover:-translate-y-2">
                    <h3 class="text-2xl font-semibold mb-4 text-pink-300"><i class="fas fa-chart-line mr-2"></i> Staking</h3>
                    <p class="text-gray-400">15% (300M SPK)<br>48mo linear release</p>
                </div>
                <div class="bg-gray-800 p-8 rounded-xl shadow-lg border border-gray-700 hover:border-green-500 transition-all duration-300 transform hover:-translate-y-2">
                    <h3 class="text-2xl font-semibold mb-4 text-green-300"><i class="fas fa-cogs mr-2"></i> Ecosystem</h3>
                    <p class="text-gray-400">15% (300M SPK)<br>DAO controlled</p>
                </div>
                <div class="bg-gray-800 p-8 rounded-xl shadow-lg border border-gray-700 hover:border-yellow-500 transition-all duration-300 transform hover:-translate-y-2">
                    <h3 class="text-2xl font-semibold mb-4 text-yellow-300"><i class="fas fa-users mr-2"></i> Team & Dev</h3>
                    <p class="text-gray-400">10% (200M SPK)<br>12mo cliff, 24mo vesting</p>
                </div>
                <div class="bg-gray-800 p-8 rounded-xl shadow-lg border border-gray-700 hover:border-red-500 transition-all duration-300 transform hover:-translate-y-2">
                    <h3 class="text-2xl font-semibold mb-4 text-red-300"><i class="fas fa-bullhorn mr-2"></i> Marketing</h3>
                    <p class="text-gray-400">8% (160M SPK)<br>25% TGE, 18mo linear</p>
                </div>
            </div>
        </div>
    </section>

    <!-- Roadmap Section -->
    <section id="roadmap" class="py-20 px-4 bg-gray-950">
        <div class="max-w-6xl mx-auto text-center">
            <h2 class="text-4xl md:text-5xl font-bold mb-12 text-transparent bg-clip-text bg-gradient-to-r from-cyan-400 to-purple-600">Roadmap</h2>
            <div class="roadmap">
                <div class="bg-gray-800 p-8 rounded-xl shadow-lg border border-gray-700 mb-8 text-left">
                    <h3 class="text-2xl font-semibold mb-4 text-purple-300">Phase 1: Foundation & Launch (Q3–Q4 2025)</h3>
                    <ul class="list-disc list-inside text-gray-400 space-y-2 text-lg">
                        <li>Smart contract development and security audits</li>
                        <li>Token Generation Event and public launch</li>
                        <li>Initial DEX listing and liquidity provision</li>
                        <li>Launch official website and publish whitepaper</li>
                    </ul>
                </div>
                <div class="bg-gray-800 p-8 rounded-xl shadow-lg border border-gray-700 mb-8 text-left">
                    <h3 class="text-2xl font-semibold mb-4 text-cyan-300">Phase 2: Ecosystem Expansion (Q1–Q3 2026)</h3>
                    <ul class="list-disc list-inside text-gray-400 space-y-2 text-lg">
                        <li>Launch SPK staking platform</li>
                        <li>DAO governance rollout</li>
                        <li>Strategic partnerships and integrations</li>
                        <li>Cross-chain bridge development</li>
                    </ul>
                </div>
                <div class="bg-gray-800 p-8 rounded-xl shadow-lg border border-gray-700 text-left">
                    <h3 class="text-2xl font-semibold mb-4 text-pink-300">Phase 3: Mass Adoption (Q4 2026+)</h3>
                    <ul class="list-disc list-inside text-gray-400 space-y-2 text-lg">
                        <li>Advanced yield farming and liquidity mining</li>
                        <li>DEX integration and trading optimization</li>
                        <li>Tokenized real-world assets</li>
                        <li>Layer 2 integration and global outreach</li>
                    </ul>
                </div>
            </div>
        </div>
    </section>

    <!-- Footer -->
    <footer class="p-6 bg-gray-950 border-t border-gray-800 text-center text-gray-500 rounded-t-xl z-10">
        <p class="mb-4">&copy; 2025 SPK Token. All rights reserved.</p>
        <div class="flex justify-center space-x-6 text-2xl">
            <a href="#" class="hover:text-purple-400 transition-colors duration-300">
                <img src="https://placehold.co/24x24/000000/FFFFFF?text=X" alt="Twitter" class="inline-block w-6 h-6 rounded-full" />
            </a>
            <a href="#" class="hover:text-purple-400 transition-colors duration-300">
                <img src="https://placehold.co/24x24/000000/FFFFFF?text=D" alt="Discord" class="inline-block w-6 h-6 rounded-full" />
            </a>
            <a href="#" class="hover:text-purple-400 transition-colors duration-300">
                <img src="https://placehold.co/24x24/000000/FFFFFF?text=T" alt="Telegram" class="inline-block w-6 h-6 rounded-full" />
            </a>
        </div>
    </footer>

    <script>
        // --- Custom Message Box Functionality ---
        const messageBox = document.getElementById('messageBox');
        let messageTimeout;

        function showMessage(message, type = 'success') {
            clearTimeout(messageTimeout);
            messageBox.innerHTML = `${type === 'success' ? '<i class="fas fa-check-circle mr-2"></i>' : type === 'error' ? '<i class="fas fa-exclamation-circle mr-2"></i>' : '<i class="fas fa-exclamation-triangle mr-2"></i>'} ${message}`;
            messageBox.className = `message-box ${type}`; // Apply type class
            messageBox.classList.remove('hidden');

            messageTimeout = setTimeout(() => {
                messageBox.classList.add('hidden');
            }, 5000); // Hide after 5 seconds
        }

        // --- Smart Contract Constants (Placeholders) ---
        const PRESALE_CONTRACT_ADDRESS = "EQA0o000000000000000000000000000000000000000000000000000000000000000"; // Example address
        const CONTRACT_ABI = [
            {
                "name": "contributePresale",
                "inputs": [],
                "outputs": [],
                "type": "function"
            }
        ];

        // --- Multi-Crypto Wallet Addresses (HARDCODED for demonstration) ---
        const WALLET_ADDRESSES = {
            ton: "UQC6_hQoFH_S0zAnK2fFMuAxMIqgIssXjYuqtCJtKBKeN8sI",
            btc: "1PdRVFj1xt5D6Eh1fdb11PbesxbvsfzEiW",
            eth: "0x79467Ba14c8B0c1cc8273901E83fF07A108Ce31D", // ERC20 ETH & USDT (ERC20)
            bnb: "0x79467Ba14c8B0c1cc8273901E83fF07A108Ce31D", // BEP20 BNB & USDT (BEP20)
            usdt_erc20: "0x79467Ba14c8B0c1cc8273901E83fF07A108Ce31D", // Same as ETH for simplicity, but could be different
            usdt_trc20: "TMU93szgG1Pu5eA7psbUxjyqqYDPZvx1ch",
            usdt_bep20: "0x79467Ba14c8B0c1cc8273901E83fF07A108Ce31D" // Same as BNB for simplicity, but could be different
        };


        // --- TON Connect Configuration ---
        const tonConnectConfig = {
            manifestUrl: "https://spk-presale-git-main-captsplufiks-projects.vercel.app/tonconnect-manifest.json",
            buttonRootId: "ton-connect",
            chain: 'mainnet',
        };

        let tonConnectUI;
        let presaleClaimed = false; // Client-side flag for claim status
        // Removed: let currentTonPrice = 0; // Variable to store the fetched TON price

        // Firebase variables (assigned in DOMContentLoaded)
        let db;
        let auth;
        let analytics;
        let currentUserId = null;
        let isAuthReady = false; // Flag to indicate Firebase auth is ready
        let isAdmin = false; // New: Flag to track admin status

        // Firebase configuration (now hardcoded as per your provided details)
        const firebaseConfig = {
            apiKey: "AIzaSyBQLJ8yVgrnchDkfpj8NF_aPiSDPDo2a_Q",
            authDomain: "splufik-spk.firebaseapp.com",
            projectId: "splufik-spk",
            storageBucket: "splufik-spk.firebasestorage.app",
            messagingSenderId: "67191790905",
            appId: "1:67191790905:web:56ed3a7946e392cbe45ce8",
            measurementId: "G-QGWXYKS7DS"
        };
        
        const appId = firebaseConfig.projectId; // Use the projectId from the provided config

        const contributeBtn = document.getElementById("contribute-btn");
        const claimPresaleTokensBtn = document.getElementById("claim-presale-tokens-btn");
        const raisedAmountElement = document.getElementById('raisedAmount');
        const targetAmountElement = document.getElementById('targetAmount');
        const presaleProgressElement = document.getElementById('presaleProgress');
        const userIdDisplayElement = document.getElementById('user-id-display');
        // Removed: const tonPriceDisplayElement = document.getElementById('ton-price-display');

        // Admin Panel Elements
        const adminPanelSection = document.getElementById('admin-panel');
        const adminLoginBtn = document.getElementById('admin-login-btn');
        const adminLogoutBtn = document.getElementById('admin-logout-btn');
        const adminStatusElement = document.getElementById('admin-status');
        const adminUserIdElement = document.getElementById('admin-user-id');
        const adminDataView = document.getElementById('admin-data-view');
        const adminRaisedAmountElement = document.getElementById('admin-raised-amount');
        const adminTargetAmountElement = document.getElementById('admin-target-amount');

        // Payment Method UI Elements
        const paymentMethodSelect = document.getElementById('paymentMethod');
        const tonPaymentArea = document.getElementById('ton-payment-area');
        const otherCryptoPaymentArea = document.getElementById('other-crypto-payment-area');
        const usdtAmountInput = document.getElementById('usdtAmount'); // For TON payment
        const usdtAmountOtherCryptoInput = document.getElementById('usdtAmountOtherCrypto'); // For other crypto payments
        const selectedCryptoNameDisplay = document.getElementById('selected-crypto-name');
        const cryptoAddressDisplay = document.getElementById('crypto-address-display');
        const qrCodeImg = document.getElementById('qr-code-img');
        const txHashInput = document.getElementById('txHashInput');
        const spkTokenRateDisplay = document.getElementById('spk-token-rate');
        const presaleTransactionStatusDiv = document.getElementById('presale-transaction-status');
        const contributeBtnNormalState = document.getElementById('contribute-btn-normal-state');
        const contributeBtnProcessingState = document.getElementById('contribute-btn-processing-state');

        const presaleTokenRate = 200; // SPK per 1 USDT


        // --- Countdown Dates (Global Declarations) ---
        // Presale begins on June 16, 2025
        const presaleStartDate = new Date("2025-06-16T00:00:00Z");

        // Presale ends on June 17, 2026
        const presaleEndDate = new Date("2026-06-17T00:00:00Z");


        // --- Removed: Fetch TON Price from CoinGecko ---
        // The fetchTonPrice function and its associated calls are removed as requested.

        // Update SPK Token Rate Display based on current USDT amount
        function updateSpkTokenRateDisplay() {
            const selectedMethod = paymentMethodSelect.value;
            let usdtValue = 0;

            if (selectedMethod === 'ton') {
                usdtValue = parseFloat(usdtAmountInput.value) || 0;
            } else {
                usdtValue = parseFloat(usdtAmountOtherCryptoInput.value) || 0;
            }
            
            const tokenAmount = usdtValue * presaleTokenRate;
            spkTokenRateDisplay.textContent = `${tokenAmount.toLocaleString()} SPK`;
        }


        // Initialize Firebase and set up authentication
        async function initializeFirebase() {
            // Check if window.firebase and its properties are available
            if (!window.firebase || !window.firebase.db || !window.firebase.auth || !window.firebase.analytics) {
                console.error("Firebase global objects (db, auth, analytics) not available.");
                showMessage("Firebase services failed to initialize. Data persistence and analytics disabled.", 'error');
                isAuthReady = true;
                updateButtonStates();
                return;
            }
            
            // Assign global variables from window.firebase
            db = window.firebase.db;
            auth = window.firebase.auth;
            analytics = window.firebase.analytics;

            try {
                setupAuthStateListener();
            } catch (error) {
                console.error("Error initializing Firebase (within initializeFirebase func):", error);
                showMessage(`Firebase initialization failed: ${error.message}`, 'error');
                isAuthReady = true;
                updateButtonStates();
            }
        }

        // Function to set up Firebase Auth state listener
        function setupAuthStateListener() {
            if (!auth) {
                console.error("Auth object is undefined, cannot set up auth state listener.");
                return;
            }
            window.firebase.onAuthStateChanged(auth, async (user) => { // Use window.firebase.onAuthStateChanged
                if (user) {
                    currentUserId = user.uid;
                    isAuthReady = true;
                    console.log("Firebase authenticated. User ID:", currentUserId);
                    userIdDisplayElement.textContent = `User ID: ${currentUserId}`;
                    
                    // Check if the current user is an admin (e.g., based on a specific UID or a Firestore role)
                    // For demonstration, let's assume a hardcoded admin UID. In production, use proper roles.
                    const ADMIN_UIDS = ["YOUR_ADMIN_UID_1", "YOUR_ADMIN_UID_2"]; // Replace with actual admin UIDs
                    isAdmin = ADMIN_UIDS.includes(currentUserId);
                    
                    if (isAdmin) {
                        adminStatusElement.textContent = "Status: Logged In as Admin";
                        adminUserIdElement.textContent = `Admin UID: ${currentUserId}`;
                        adminLoginBtn.classList.add('hidden');
                        adminLogoutBtn.classList.remove('hidden');
                        adminPanelSection.classList.add('active'); // Show admin panel
                        adminDataView.classList.remove('hidden'); // Show admin data view
                    } else {
                        adminStatusElement.textContent = "Status: Logged In (User)";
                        adminUserIdElement.textContent = `User UID: ${currentUserId}`;
                        adminLoginBtn.classList.remove('hidden');
                        adminLogoutBtn.classList.remove('hidden');
                        adminPanelSection.classList.remove('active');
                    }

                    setupFirestoreListeners();
                    fetchUserClaimStatus();

                } else {
                    currentUserId = null;
                    isAuthReady = true;
                    isAdmin = false;
                    console.log("Firebase not authenticated. Attempting anonymous sign-in.");
                    userIdDisplayElement.textContent = 'User ID: Not Available';
                    adminStatusElement.textContent = "Status: Not Logged In";
                    adminUserIdElement.textContent = '';
                    adminLoginBtn.classList.remove('hidden');
                    adminLogoutBtn.classList.add('hidden');
                    adminPanelSection.classList.remove('active');

                    try {
                        await window.firebase.signInAnonymously(auth); // Use window.firebase.signInAnonymously
                    } catch (anonError) {
                        console.error("Error during anonymous sign-in attempt:", anonError);
                        showMessage(`Anonymous sign-in failed: ${anonError.message}. Data persistence may be limited.`, 'error');
                    }
                    updateButtonStates();
                }
            });
        }

        // Handle Admin Google Login
        adminLoginBtn.addEventListener('click', async () => {
            const provider = new window.firebase.GoogleAuthProvider(); // Use window.firebase.GoogleAuthProvider
            try {
                await window.firebase.signInWithPopup(auth, provider); // Use window.firebase.signInWithPopup
                showMessage('Successfully logged in as admin!', 'success');
                if (analytics) {
                    window.firebase.logEvent(analytics, 'admin_login_success');
                }
            } catch (error) {
                console.error("Admin login failed:", error);
                showMessage(`Admin login failed: ${error.message}`, 'error');
                if (analytics) {
                    window.firebase.logEvent(analytics, 'admin_login_failed', { error_message: error.message });
                }
            }
        });

        // Handle Admin Logout
        adminLogoutBtn.addEventListener('click', async () => {
            try {
                await window.firebase.signOut(auth); // Use window.firebase.signOut
                showMessage('Successfully logged out.', 'success');
                if (analytics) {
                    window.firebase.logEvent(analytics, 'admin_logout');
                }
            } catch (error) {
                console.error("Admin logout failed:", error);
                showMessage(`Admin logout failed: ${error.message}`, 'error');
            }
        });


        // Set up Firestore listeners for real-time updates
        function setupFirestoreListeners() {
            if (!db || !isAuthReady || !currentUserId) {
                console.warn("Firestore, Auth, or User ID not ready, cannot set up listeners.");
                return;
            }

            // Listen to public presale data
            const presaleDocRef = window.firebase.doc(db, "artifacts", appId, "public", "data", "presale_data", "current_presale"); // Use window.firebase.doc

            window.firebase.onSnapshot(presaleDocRef, (docSnap) => { // Use window.firebase.onSnapshot
                if (docSnap.exists()) {
                    const data = docSnap.data();
                    const currentRaised = parseFloat(data.raisedAmount || 0);
                    const currentTarget = parseFloat(data.targetAmount || 5000000);

                    raisedAmountElement.textContent = `$${currentRaised.toLocaleString()}`;
                    targetAmountElement.textContent = `$${currentTarget.toLocaleString()}`;

                    if (isAdmin) {
                        adminRaisedAmountElement.textContent = `$${currentRaised.toLocaleString()}`;
                        adminTargetAmountElement.textContent = `$${currentTarget.toLocaleString()}`;
                    }


                    const progress = (currentRaised / currentTarget) * 100;
                    presaleProgressElement.style.width = `${Math.min(progress, 100)}%`;

                    console.log("Presale data updated from Firestore:", data);
                } else {
                    console.log("No presale data found in Firestore. Initializing with defaults.");
                    window.firebase.setDoc(presaleDocRef, { // Use window.firebase.setDoc
                        raisedAmount: 20000,
                        targetAmount: 5000000,
                        lastUpdated: new Date()
                    }, { merge: true }).then(() => {
                        console.log("Default presale data set.");
                    }).catch(e => {
                        console.error("Error setting default presale data:", e);
                        showMessage(`Error initializing presale data: ${e.message}`, 'error');
                    });
                }
                updateButtonStates();
            }, (error) => {
                console.error("Error listening to presale data:", error);
                showMessage(`Error fetching presale data: ${error.message}`, 'error');
            });
        }

        // Fetch user-specific claim status from Firestore
        async function fetchUserClaimStatus() {
            if (!db || !currentUserId) {
                console.warn("Firestore or User ID not ready, cannot fetch claim status.");
                return;
            }
            try {
                const userClaimDocRef = window.firebase.doc(db, "artifacts", appId, "users", currentUserId, "presale_claims", "my_claim_status"); // Use window.firebase.doc
                const docSnap = await window.firebase.getDoc(userClaimDocRef); // Use window.firebase.getDoc
                if (docSnap.exists() && docSnap.data().claimed) {
                    presaleClaimed = true;
                    document.getElementById('presale-claim-status').textContent = "You have already claimed your presale tokens.";
                } else {
                    presaleClaimed = false;
                    document.getElementById('presale-claim-status').textContent = "";
                }
                updateButtonStates();
            } catch (error) {
                console.error("Error fetching user claim status:", error);
                showMessage(`Error fetching claim status: ${error.message}`, 'error');
            }
        }


        // Initialize TON Connect
        async function initTonConnect() {
            try {
                tonConnectUI = new TON_CONNECT_UI.TonConnectUI({
                    manifestUrl: tonConnectConfig.manifestUrl,
                    buttonRootId: tonConnectConfig.buttonRootId,
                    language: 'en',
                    uiPreferences: {
                        theme: 'DARK',
                        colors: {
                            light: {
                                connectButton: {
                                    background: '#4F46E5',
                                    text: '#FFFFFF'
                                }
                            }
                        }
                    }
                });

                tonConnectUI.onStatusChange(wallet => {
                    const walletStatusElement = document.getElementById("wallet-status");
                    
                    if (wallet && wallet.account.address) {
                        const shortAddress = `${wallet.account.address.slice(0, 6)}...${wallet.account.address.slice(-4)}`;
                        walletStatusElement.textContent = `Connected: ${shortAddress}`;
                        walletStatusElement.classList.add('text-green-400');
                        walletStatusElement.classList.remove('text-gray-400');
                        
                        updateButtonStates();
                        showMessage('Wallet connected and ready!', 'success');
                        if (analytics) {
                            window.firebase.logEvent(analytics, 'wallet_connected', { wallet_address: wallet.account.address });
                        }

                    } else {
                        walletStatusElement.textContent = 'Not Connected';
                        walletStatusElement.classList.remove('text-green-400');
                        walletStatusElement.classList.add('text-gray-400');
                        
                        disableButtons();
                        showMessage('Wallet disconnected.', 'warning');
                        if (analytics) {
                            window.firebase.logEvent(analytics, 'wallet_disconnected');
                        }
                    }
                    // Only show TON Connect UI button if TON is selected as payment method
                    if (paymentMethodSelect.value === 'ton') {
                        document.getElementById('ton-connect').style.display = 'block';
                    } else {
                        document.getElementById('ton-connect').style.display = 'none';
                    }
                });

                // Use window.firebase.logEvent here
                window.firebase.logEvent(analytics, 'ton_connect_init_attempt');

                tonConnectUI.connectionRestored.then((wallet) => {
                    if (wallet) {
                        console.log("Restored existing connection:", wallet);
                        if (analytics) {
                             window.firebase.logEvent(analytics, 'wallet_connection_restored', { wallet_address: wallet.account.address });
                        }
                    } else {
                        console.log("No existing connection found to restore.");
                        updateButtonStates();
                    }
                }).catch((error) => {
                    console.error("Error restoring TON Connect UI connection:", error);
                    showMessage("Failed to restore wallet connection. Please try refreshing.", 'error');
                    if (analytics) {
                        window.firebase.logEvent(analytics, 'wallet_connection_restore_failed', { error_message: error.message });
                    }
                });

            } catch (error) {
                console.error('TON Connect initialization failed:', error);
                showMessage('Failed to initialize wallet system. Please check console for details and try again later.', 'error');
                if (analytics) {
                    window.firebase.logEvent(analytics, 'ton_connect_init_failed', { error_message: error.message });
                }
            }
        }

        // A helper function to disable buttons and reset related UI elements when wallet is disconnected
        function disableButtons() {
            contributeBtn.disabled = true;
            contributeBtn.textContent = "Connect Wallet to Buy"; // Changed to generic
            claimPresaleTokensBtn.disabled = true;
            claimPresaleTokensBtn.textContent = "Connect Wallet to Claim Presale";
            document.getElementById("wallet-status").textContent = "Not Connected";
        }


        // --- Master function to update all button states ---
        function updateButtonStates() {
            const now = new Date().getTime();
            const isWalletConnected = tonConnectUI && tonConnectUI.connected;
            const presaleHasStarted = now >= presaleStartDate.getTime();
            const presaleHasEnded = now >= presaleEndDate.getTime();
            const selectedMethod = paymentMethodSelect.value;

            // Update Contribute Button
            if (selectedMethod === 'ton') {
                usdtAmountInput.classList.remove('hidden'); // Show TON USDT amount input
                usdtAmountOtherCryptoInput.classList.add('hidden'); // Hide other crypto USDT amount input
                txHashInput.classList.add('hidden'); // Hide TX hash input
                otherCryptoPaymentArea.classList.add('hidden'); // Hide other crypto area
                tonPaymentArea.classList.remove('hidden'); // Show TON payment area
                document.getElementById('ton-connect').style.display = 'block'; // Show TON Connect button

                if (!isWalletConnected) {
                    contributeBtn.disabled = true;
                    contributeBtnNormalState.textContent = "Connect Wallet to Buy"; // Changed to generic
                } else if (!presaleHasStarted) {
                    contributeBtn.disabled = true;
                    contributeBtnNormalState.textContent = "Presale Not Started Yet";
                } else if (presaleHasEnded) {
                    contributeBtn.disabled = true;
                    contributeBtnNormalState.textContent = "Presale Ended";
                } else {
                    contributeBtn.disabled = false;
                    contributeBtnNormalState.textContent = "Buy SPK Tokens (via TON)";
                }
            } else {
                usdtAmountInput.classList.add('hidden'); // Hide TON USDT amount input
                usdtAmountOtherCryptoInput.classList.remove('hidden'); // Show other crypto USDT amount input
                txHashInput.classList.remove('hidden'); // Show TX hash input
                otherCryptoPaymentArea.classList.remove('hidden'); // Show other crypto area
                tonPaymentArea.classList.add('hidden'); // Hide TON payment area
                document.getElementById('ton-connect').style.display = 'none'; // Hide TON Connect button

                if (!presaleHasStarted) {
                    contributeBtn.disabled = true;
                    contributeBtnNormalState.textContent = "Presale Not Started Yet";
                } else if (presaleHasEnded) {
                    contributeBtn.disabled = true;
                    contributeBtnNormalState.textContent = "Presale Ended";
                } else if (!txHashInput.value.trim() || parseFloat(usdtAmountOtherCryptoInput.value) <= 0) {
                     contributeBtn.disabled = true;
                     contributeBtnNormalState.textContent = "Enter Amount & TX Hash to Confirm";
                }
                else {
                    contributeBtn.disabled = false;
                    contributeBtnNormalState.textContent = `Confirm Payment (via ${selectedMethod.toUpperCase().replace('_', ' ')})`;
                }
            }

            // Update Claim Button (remains the same logic, only TON for claim)
            if (!isWalletConnected) {
                claimPresaleTokensBtn.disabled = true;
                claimPresaleTokensBtn.textContent = "Connect Wallet to Claim Presale";
            } else if (!presaleHasEnded) {
                claimPresaleTokensBtn.disabled = true;
                claimPresaleTokensBtn.textContent = "Claim Not Active Yet (Presale Ongoing)";
            } else if (presaleClaimed) {
                claimPresaleTokensBtn.disabled = true;
                claimPresaleTokensBtn.textContent = "Presale Tokens Claimed!";
            } else {
                claimPresaleTokensBtn.disabled = false;
                claimPresaleTokensBtn.textContent = "Claim Your Presale Tokens";
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            // Assign global variables from window.firebase here
            db = window.firebase.db;
            auth = window.firebase.auth;
            analytics = window.firebase.analytics;

            initializeFirebase();
            initTonConnect();
            updatePresaleCountdown();
            // Removed: fetchTonPrice();
            // Removed: setInterval(fetchTonPrice, 300000); // Fetch price every 5 minutes (300000 ms)

            // Initial setup for payment method display
            handlePaymentMethodChange();
        });


        // --- Payment Method Selection Logic ---
        paymentMethodSelect.addEventListener('change', handlePaymentMethodChange);
        usdtAmountInput.addEventListener('input', updateSpkTokenRateDisplay); // For TON
        usdtAmountOtherCryptoInput.addEventListener('input', () => { // For other cryptos
            updateSpkTokenRateDisplay();
            updateButtonStates(); // Re-evaluate button state based on TX hash input
        });
        txHashInput.addEventListener('input', updateButtonStates); // Re-evaluate button state

        function handlePaymentMethodChange() {
            const selectedMethod = paymentMethodSelect.value;
            const currentAddress = WALLET_ADDRESSES[selectedMethod];

            // Hide/Show relevant sections
            if (selectedMethod === 'ton') {
                tonPaymentArea.classList.remove('hidden');
                otherCryptoPaymentArea.classList.add('hidden');
                document.getElementById('ton-connect').style.display = 'block'; // Show TON Connect button
                // Reset inputs for other crypto payments when TON is selected
                usdtAmountOtherCryptoInput.value = '';
                txHashInput.value = '';

            } else {
                tonPaymentArea.classList.add('hidden');
                otherCryptoPaymentArea.classList.remove('hidden');
                document.getElementById('ton-connect').style.display = 'none'; // Hide TON Connect button

                // Update address and QR code for selected crypto
                selectedCryptoNameDisplay.textContent = selectedMethod.toUpperCase().replace('_', ' ');
                cryptoAddressDisplay.value = currentAddress;
                qrCodeImg.src = `https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=${currentAddress}`;
                 // Reset inputs for TON payment when other crypto is selected
                usdtAmountInput.value = '';
            }
            updateSpkTokenRateDisplay(); // Update SPK rate based on current input
            updateButtonStates(); // Re-evaluate button state
        }


        // --- Presale Countdown Timer Logic ---
        const presaleCountdownElement = document.getElementById('presale-countdown');
        const presaleDaysElement = document.getElementById('presale-days');
        const presaleHoursElement = document.getElementById('presale-hours');
        const presaleMinutesElement = document.getElementById('presale-minutes');
        const presaleSecondsElement = document.getElementById('presale-seconds');
        const presaleCountdownTitle = document.getElementById('presale-countdown-title');


        function updatePresaleCountdown() {
            const now = new Date().getTime();
            let distance;
            let titleText = "";
            let timerExpired = false;

            if (now < presaleStartDate.getTime()) {
                distance = presaleStartDate.getTime() - now;
                titleText = "Presale Starts In:";
            } else if (now >= presaleStartDate.getTime() && now < presaleEndDate.getTime()) {
                distance = presaleEndDate.getTime() - now;
                titleText = "Presale Ends In:";
            } else {
                distance = -1;
                titleText = "Presale Has Ended!";
                timerExpired = true;
            }

            presaleCountdownTitle.textContent = titleText;

            if (timerExpired) {
                clearInterval(presaleCountdownInterval);
                presaleCountdownElement.innerHTML = "<span class='text-red-500'>PRESALE HAS ENDED!</span>";
            } else {
                const days = Math.floor(distance / (1000 * 60 * 60 * 24));
                const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                const seconds = Math.floor((distance % (1000 * 60)) / 1000);

                presaleDaysElement.textContent = String(days).padStart(2, '0');
                presaleHoursElement.textContent = String(hours).padStart(2, '0');
                presaleMinutesElement.textContent = String(minutes).padStart(2, '0');
                presaleSecondsElement.textContent = String(seconds).padStart(2, '0');
            }
            updateButtonStates();
        }

        const presaleCountdownInterval = setInterval(updatePresaleCountdown, 1000);
        updatePresaleCountdown();


        // --- Presale Contribution Logic ---
        contributeBtn.addEventListener('click', async () => {
            const selectedMethod = paymentMethodSelect.value;
            let amountUsdt = 0;
            let txHash = '';

            if (selectedMethod === 'ton') {
                amountUsdt = parseFloat(usdtAmountInput.value);
                if (!tonConnectUI || !tonConnectUI.connected) {
                    showMessage('Please connect your wallet to contribute.', 'error'); // Changed to generic
                    if (analytics) {
                        window.firebase.logEvent(analytics, 'presale_contribute_failed', { reason: 'wallet_not_connected', method: selectedMethod });
                    }
                    return;
                }
            } else {
                amountUsdt = parseFloat(usdtAmountOtherCryptoInput.value);
                txHash = txHashInput.value.trim();
                if (!txHash) {
                    showMessage('Please enter your transaction hash.', 'error');
                    if (analytics) {
                        window.firebase.logEvent(analytics, 'presale_contribute_failed', { reason: 'missing_tx_hash', method: selectedMethod });
                    }
                    return;
                }
                 // Simple validation for txHash (can be enhanced)
                if (txHash.length < 10) {
                    showMessage('Transaction hash appears too short. Please check.', 'warning');
                    if (analytics) {
                        window.firebase.logEvent(analytics, 'presale_contribute_failed', { reason: 'short_tx_hash', method: selectedMethod });
                    }
                    return;
                }
            }

            if (isNaN(amountUsdt) || amountUsdt < 10 || amountUsdt > 1000) {
                showMessage('Please enter a valid amount between 10-1000 USDT equivalent.', 'error');
                if (analytics) {
                    window.firebase.logEvent(analytics, 'presale_contribute_failed', { reason: 'invalid_amount', entered_amount: amountUsdt, method: selectedMethod });
                }
                return;
            }

            if (new Date().getTime() < presaleStartDate.getTime()) {
                showMessage('Presale has not started yet. Please wait.', 'warning');
                if (analytics) {
                    window.firebase.logEvent(analytics, 'presale_contribute_failed', { reason: 'presale_not_started', method: selectedMethod });
                }
                return;
            }
            if (new Date().getTime() >= presaleEndDate.getTime()) {
                showMessage('The presale has already ended.', 'error');
                if (analytics) {
                    window.firebase.logEvent(analytics, 'presale_contribute_failed', { reason: 'presale_ended', method: selectedMethod });
                }
                return;
            }
            if (!db || !currentUserId) {
                showMessage('Firebase is not ready. Please try again.', 'error');
                console.error("Firebase not ready for contribution. DB:", db, "User ID:", currentUserId);
                if (analytics) {
                    window.firebase.logEvent(analytics, 'presale_contribute_failed', { reason: 'firebase_not_ready', method: selectedMethod });
                }
                return;
            }
            // Removed: If statement checking currentTonPrice

            // Set button to processing state
            contributeBtnNormalState.classList.add('hidden');
            contributeBtnProcessingState.classList.remove('hidden');
            contributeBtn.disabled = true;
            presaleTransactionStatusDiv.innerHTML = `<div class="transaction-status status-warning"><i class="fas fa-hourglass-half mr-2"></i> Processing contribution via ${selectedMethod.toUpperCase().replace('_', ' ')}...</div>`;

            if (analytics) {
                window.firebase.logEvent(analytics, 'presale_contribute_initiated', { amount_usdt: amountUsdt, user_id: currentUserId, method: selectedMethod, tx_hash: txHash || 'N/A' });
            }

            try {
                if (selectedMethod === 'ton') {
                    // TON-specific transaction logic
                    // Fixed TON conversion rate for demonstration, as live API removed
                    const tonEquivalent = amountUsdt / 2.5; // Assuming 1 TON = 2.5 USDT for demonstration
                    const tonNano = (tonEquivalent * 1e9).toFixed(0);

                    const tx = {
                        validUntil: Math.floor(Date.now() / 1000) + 600,
                        messages: [{
                            address: PRESALE_CONTRACT_ADDRESS,
                            amount: tonNano,
                        }]
                    };
                    await tonConnectUI.sendTransaction(tx);
                    presaleTransactionStatusDiv.innerHTML = `<div class="transaction-status status-success"><i class="fas fa-check-circle mr-2"></i> Sent ${tonEquivalent.toFixed(4)} TON to SPK presale contract! You received ${amountUsdt * presaleTokenRate} SPK.</div>`;
                    showMessage(`Successfully contributed ${amountUsdt} USDT equivalent via TON!`, 'success');
                    usdtAmountInput.value = ''; // Clear input after successful transaction

                } else {
                    // Other crypto payment logic (simulated)
                    // Here, you would typically verify the transaction hash on a backend
                    // For this client-side demo, we'll just simulate success and record.
                    await new Promise(resolve => setTimeout(2000, resolve)); // Simulate network delay

                    presaleTransactionStatusDiv.innerHTML = `<div class="transaction-status status-success"><i class="fas fa-check-circle mr-2"></i> Confirmed payment via ${selectedMethod.toUpperCase().replace('_', ' ')}! You received ${amountUsdt * presaleTokenRate} SPK.</div>`;
                    showMessage(`Successfully confirmed ${amountUsdt} USDT equivalent via ${selectedMethod.toUpperCase().replace('_', ' ')}!`, 'success');
                    txHashInput.value = ''; // Clear input after successful confirmation
                    usdtAmountOtherCryptoInput.value = '';
                }
                
                // Update Firestore for both TON and other crypto payments
                const presaleDocRef = window.firebase.doc(db, "artifacts", appId, "public", "data", "presale_data", "current_presale");
                await window.firebase.updateDoc(presaleDocRef, {
                    raisedAmount: window.firebase.increment(amountUsdt),
                    lastContributor: currentUserId,
                    lastContributionAmount: amountUsdt,
                    lastContributionMethod: selectedMethod,
                    lastUpdated: new Date()
                });
                console.log("Raised amount updated in Firestore.");

                if (analytics) {
                    window.firebase.logEvent(analytics, 'presale_contribute_success', {
                        amount_usdt: amountUsdt,
                        tokens_received: amountUsdt * presaleTokenRate,
                        user_id: currentUserId,
                        method: selectedMethod,
                        tx_hash: txHash || 'N/A'
                    });
                }

            } catch (error) {
                console.error("Presale contribution failed:", error);
                presaleTransactionStatusDiv.innerHTML = `<div class="transaction-status status-error"><i class="fas fa-exclamation-circle mr-2"></i> Transaction cancelled or failed.</div>`;
                showMessage(`Contribution failed: ${error.message || 'Transaction cancelled or failed.'}`, 'error');
                if (analytics) {
                    window.firebase.logEvent(analytics, 'presale_contribute_failed', { reason: error.message || 'transaction_failed', user_id: currentUserId, method: selectedMethod });
                }
            } finally {
                // Ensure button state is reset regardless of success or failure
                contributeBtnNormalState.classList.remove('hidden');
                contributeBtnProcessingState.classList.add('hidden');
                contributeBtn.disabled = false;
                updateButtonStates();
            }
        });

        // Presale Claim Button Logic
        claimPresaleTokensBtn.addEventListener('click', async () => {
            if (!tonConnectUI || !tonConnectUI.connected) {
                showMessage('Please connect your wallet to claim presale tokens.', 'error');
                if (analytics) {
                    window.firebase.logEvent(analytics, 'presale_claim_failed', { reason: 'wallet_not_connected' });
                }
                return;
            }
            if (new Date().getTime() < presaleEndDate.getTime()) {
                showMessage('Presale claim is not yet active. Please wait until the presale ends.', 'warning');
                if (analytics) {
                    window.firebase.logEvent(analytics, 'presale_claim_failed', { reason: 'claim_not_active' });
                }
                return;
            }
            if (presaleClaimed) {
                showMessage('You have already claimed your presale tokens.', 'warning');
                if (analytics) {
                    window.firebase.logEvent(analytics, 'presale_claim_failed', { reason: 'already_claimed', user_id: currentUserId });
                }
                return;
            }
            if (!db || !currentUserId) {
                showMessage('Firebase is not ready. Cannot record claim.', 'error');
                console.error("Firebase not ready for claim. DB:", db, "User ID:", currentUserId);
                if (analytics) {
                    window.firebase.logEvent(analytics, 'presale_claim_failed', { reason: 'firebase_not_ready' });
                }
                return;
            }

            const presaleClaimStatusDiv = document.getElementById('presale-claim-status');
            presaleClaimStatusDiv.textContent = "Processing Presale Token Claim... ";
            claimPresaleTokensBtn.disabled = true;
            claimPresaleTokensBtn.textContent = "Claiming...";

            if (analytics) {
                window.firebase.logEvent(analytics, 'presale_claim_initiated', { user_id: currentUserId });
            }

            try {
                const tx = {
                    validUntil: Math.floor(Date.now() / 1000) + 600,
                    messages: [{
                        address: PRESALE_CONTRACT_ADDRESS,
                        amount: "5000000",
                    }]
                };
                await tonConnectUI.sendTransaction(tx);

                // Record user's claim status in Firestore
                const userClaimDocRef = window.firebase.doc(db, "artifacts", appId, "users", currentUserId, "presale_claims", "my_claim_status"); // Use window.firebase.doc
                await window.firebase.setDoc(userClaimDocRef, { // Use window.firebase.setDoc
                    claimed: true,
                    timestamp: new Date(),
                    presaleVersion: "2026-06-17-end" // Helps track claims for specific presale events
                }, { merge: true });
                console.log(`User ${currentUserId} claim status updated in Firestore.`);

                presaleClaimStatusDiv.textContent = "✅ Presale tokens claimed successfully!";
                claimPresaleTokensBtn.textContent = "Tokens Claimed!";
                showMessage('Presale tokens claimed successfully!', 'success');
                presaleClaimed = true; // Update client-side flag

                if (analytics) {
                    window.firebase.logEvent(analytics, 'presale_claim_success', { user_id: currentUserId });
                }

            } catch (error) {
                console.error("Presale token claim failed:", error);
                presaleClaimStatusDiv.innerHTML = `<div class="transaction-status status-error"><i class="fas fa-exclamation-circle mr-2"></i> Claim failed: ${error.message || 'Transaction cancelled or failed.'}</div>`;
                showMessage(`Presale claim failed: ${error.message || 'Transaction cancelled or failed.'}`, 'error');
                if (analytics) {
                    window.firebase.logEvent(analytics, 'presale_claim_failed', { reason: error.message || 'transaction_failed', user_id: currentUserId });
                }
            } finally {
                if (presaleClaimStatusDiv.textContent.includes("claimed successfully!")) {
                    claimPresaleTokensBtn.disabled = true;
                } else {
                    claimPresaleTokensBtn.disabled = false;
                    claimPresaleTokensBtn.textContent = "Claim Presale Tokens";
                }
                updateButtonStates();
            }
        });

        // --- Multi-Crypto Address Copy Function ---
        function copyAddress(id) {
            const input = document.getElementById(id);
            input.select();
            input.setSelectionRange(0, 99999);
            document.execCommand("copy");
            showMessage(`${id.split('-')[0].toUpperCase()} address copied!`, 'success'); // Use custom message box
            if (analytics) {
                window.firebase.logEvent(analytics, 'address_copied', { currency: id.split('-')[0].toUpperCase() });
            }
        }


        // --- Three.js 3D Background Setup ---
        window.onload = function () {
            const scene = new THREE.Scene();
            const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            const renderer = new THREE.WebGLRenderer({ canvas: document.getElementById('three-bg'), antialias: true, alpha: true });

            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setPixelRatio(window.devicePixelRatio);

            const ambientLight = new THREE.AmbientLight(0x404040, 2);
            scene.add(ambientLight);

            const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
            directionalLight.position.set(1, 1, 1).normalize();
            scene.add(directionalLight);

            const geometries = [
                new THREE.TorusKnotGeometry(1, 0.4, 100, 16),
                new THREE.SphereGeometry(1, 32, 32),
                new THREE.BoxGeometry(1.5, 1.5, 1.5),
                new THREE.OctahedronGeometry(1.2)
            ];

            const materials = [
                new THREE.MeshStandardMaterial({ color: 0x9333ea, transparent: true, opacity: 0.6, roughness: 0.5, metalness: 0.8 }),
                new THREE.MeshStandardMaterial({ color: 0xec4899, transparent: true, opacity: 0.6, roughness: 0.5, metalness: 0.8 }),
                new THREE.MeshStandardMaterial({ color: 0x06b6d4, transparent: true, opacity: 0.6, roughness: 0.5, metalness: 0.8 }),
                new THREE.MeshStandardMaterial({ color: 0x6d28d9, transparent: true, opacity: 0.6, roughness: 0.5, metalness: 0.8 })
            ];

            const objects = [];
            for (let i = 0; i < 10; i++) {
                const geometry = geometries[Math.floor(Math.random() * geometries.length)];
                const material = materials[Math.floor(Math.random() * materials.length)];
                const mesh = new THREE.Mesh(geometry, material);

                mesh.position.set(
                    (Math.random() - 0.5) * 20,
                    (Math.random() - 0.5) * 20,
                    (Math.random() - 0.5) * 20 - 10
                );
                mesh.rotation.set(
                    Math.random() * Math.PI,
                    Math.random() * Math.PI,
                    Math.random() * Math.PI
                );
                mesh.scale.setScalar(0.5 + Math.random() * 1.5);
                scene.add(mesh);
                objects.push(mesh);
            }

            camera.position.z = 5;

            let mouseX = 0, mouseY = 0;
            let targetX = 0, targetY = 0;
            const windowHalfX = window.innerWidth / 2;
            const windowHalfY = window.innerHeight / 2;

            document.addEventListener('mousemove', (event) => {
                mouseX = (event.clientX - windowHalfX) * 0.001;
                mouseY = (event.clientY - windowHalfY) * 0.001;
            });

            function animate() {
                requestAnimationFrame(animate);

                targetX = mouseX * 0.5;
                targetY = mouseY * 0.5;

                camera.rotation.y += (targetX - camera.rotation.y) * 0.05;
                camera.rotation.x += (targetY - camera.rotation.x) * 0.05;

                objects.forEach(obj => {
                    obj.rotation.x += 0.001 + Math.random() * 0.001;
                    obj.rotation.y += 0.001 + Math.random() * 0.001;
                    obj.position.y += Math.sin(Date.now() * 0.0001 + obj.position.x) * 0.005;
                    obj.position.x += Math.cos(Date.now() * 0.0001 + obj.position.y) * 0.005;
                });

                renderer.render(scene, camera);
            }

            animate();

            window.addEventListener('resize', () => {
                camera.aspect = window.innerWidth / window.innerHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(window.innerWidth, window.innerHeight);
            });
        };
    </script>
</body>
</html>
